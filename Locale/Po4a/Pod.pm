# Locale::Po4a::Pod -- Convert POD data to PO file, for translation.
# $Id: Pod.pm,v 1.3 2002-12-18 10:50:58 mquinson Exp $
#
# Copyright 2002 by Martin Quinson <Martin.Quinson@ens-lyon.fr>
#
# This program is free software; you may redistribute it and/or modify it
# under the terms of GPL (see COPYING).
#
# This module converts POD to PO file, so that it becomes possible to 
# translate POD formated documentation. See gettext documentation for
# more info about PO files.

############################################################################
# Modules and declarations
############################################################################

use Pod::Parser;
use Locale::Po4a::TransTractor qw(process new);

package Locale::Po4a::Pod;
use strict;
require Exporter;

use vars qw($VERSION @ISA @EXPORT $AUTOLOAD);
$VERSION = 0.1;
@ISA = qw(Locale::Po4a::TransTractor Pod::Parser);
@EXPORT = qw(new process write read writepo readpo);

sub readpo { 
    my $self=shift;
    $self->Locale::Po4a::TransTractor::readpo(@_);
}
sub writepo { 
    my $self=shift;
    $self->Locale::Po4a::TransTractor::writepo(@_);
}
sub write { 
    my $self=shift;
    $self->Locale::Po4a::TransTractor::write(@_);
}

sub process { 
    my $self=shift;
    $self->SUPER::process(@_);
}
sub new { 
    my $self=shift;
    $self->SUPER::new(@_);
}

sub command {
    my ($self, $command, $paragraph, $line_num) = @_;
#    print "cmd: '$command' '$paragraph' at $line_num\n";

    if ($command eq 'back'
	|| $command eq 'pod') {
	$self->pushline("=$command\n\n");
    } elsif ($command eq 'over') {
	$self->pushline("=$command $paragraph");
    } else {
	$paragraph=$self->translate_wrapped($paragraph,
					    $self->input_file().":$line_num",
					    "=$command");
	$self->pushline("=$command $paragraph\n");
    }
}

sub verbatim {
    my ($self, $paragraph, $line_num) = @_;
#    print "verb: '$paragraph' at $line_num\n";

    $paragraph=$self->translate($paragraph,
				$self->input_file().":$line_num",
				"verbatim");
    $self->pushline("$paragraph");
}

sub textblock {
    my ($self, $paragraph, $line_num) = @_;
#    print "text: '$paragraph' at $line_num\n";

    $paragraph=$self->translate_wrapped($paragraph,
					$self->input_file().":$line_num",
					'textblock');
    $paragraph=~ s/^\n*//s;
    $self->pushline("$paragraph\n");
}

sub end_pod {}

sub read {
    my ($self,$filename)=@_;

    push @{$self->{DOCPOD}{infile}}, $filename;
    $self->Locale::Po4a::TransTractor::read($filename);
}

sub parse {
    my $self=shift;
    map {$self->parse_from_file($_)} @{$self->{DOCPOD}{infile}};
}

sub docheader {
    return <<EOT;

        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             * 
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by pod-translate(1) version $VERSION. Do not store
it (in cvs, for example), but store the po file used as source file by
pod-translate. 

In fact, consider this as a binary, and the po file as a regular .c file:
If the po get lost, keeping this translation up-to-date will be harder.

EOT
}
1;

##############################################################################
# Module return value and documentation
##############################################################################

1;
__END__

=head1 NAME

Locale::Po4a::Pod - Convert POD data from/to PO files

=head1 SYNOPSIS

    use Locale::Po4a::Pod;
    my $parser = Locale::Po4a::Pod->new (sentence => 0, width => 78);

    # Read POD from STDIN and write to STDOUT.
    $parser->parse_from_filehandle;

    # Read POD from file.pod and write to file.txt.
    $parser->parse_from_file ('file.pod', 'file.txt');

=head1 DESCRIPTION

Locale::Po4a::Pod is a module to help the translation of documentation in
the POD format (the preferred language for documenting Perl) into other
[human] languages.

As a derived class from Pod::Parser, Locale::Po4a::Pod supports the same
methods and interfaces.  See L<Pod::Parser> for all the details; briefly,
one creates a new parser with C<< Locale::Po4a::Pod->new() >> and then
calls either parse_from_filehandle() or parse_from_file().

new() can take options, in the form of key/value pairs, that control the
behavior of the parser.  The recognized options common to all Pod:;Parser
children are:

=over 4

=item alt

If set to a true value, selects an alternate output format that, among other
things, uses a different heading style and marks C<=item> entries with a
colon in the left margin.  Defaults to false.

=item code

If set to a true value, the non-POD parts of the input file will be included
in the output.  Useful for viewing code documented with POD blocks with the
POD rendered and the code left intact.

=item indent

The number of spaces to indent regular text, and the default indentation for
C<=over> blocks.  Defaults to 4.

=item loose

If set to a true value, a blank line is printed after a C<=head1> heading.
If set to false (the default), no blank line is printed after C<=head1>,
although one is still printed after C<=head2>.  This is the default because
it's the expected formatting for manual pages; if you're formatting
arbitrary text documents, setting this to true may result in more pleasing
output.

=item quotes

Sets the quote marks used to surround CE<lt>> text.  If the value is a
single character, it is used as both the left and right quote; if it is two
characters, the first character is used as the left quote and the second as
the right quoted; and if it is four characters, the first two are used as
the left quote and the second two as the right quote.

This may also be set to the special value C<none>, in which case no quote
marks are added around CE<lt>> text.

=item sentence

If set to a true value, Locale::Po4a::Pod will assume that each sentence
ends in two spaces, and will try to preserve that spacing.  If set to
false, all consecutive whitespace in non-verbatim paragraphs is compressed
into a single space.  Defaults to true.

=item width

The column at which to wrap text on the right-hand side.  Defaults to 76.

=back

The options specific to Locale::Po4a::Pod are:

=over 4

=item pomode

In fact, this parser can work in to modes. When pomode=write, it reads a
pod file, and extract the string which should be translated to a pot
file. When pomode=read (the default), it reads a pod file and write a
similar pod file, but translating all strings on the way (the translation
is read from the po file).

=item dontwrite

if set, no file is writen at the end (if you want to manipulate the
extracted po file in memory, for example).

=back

The standard Pod::Parser method parse_from_filehandle() takes up to two
arguments, the first being the file handle to read POD from and the second
being the file handle to write the formatted output to.  The first defaults
to STDIN if not given, and the second defaults to STDOUT.  The method
parse_from_file() is almost identical, except that its two arguments are the
input and output disk files instead.  See L<Pod::Parser> for the specific
details.

=head1 DIAGNOSTICS

=over 4

=item Invalid quote specification "%s"

(F) The quote specification given (the quotes option to the constructor) was
invalid.  A quote specification must be one, two, or four characters long.

=item %s:%d: Unknown command paragraph "%s".

(W) The POD source contained a non-standard command paragraph (something of
the form C<=command args>) that Locale::Po4a::Pod didn't know about.  It was ignored.


=item %s:%d: Unmatched =back

(W) Locale::Po4a::Pod encountered a C<=back> command that didn't correspond to an
C<=over> command.

=back

=head1 RESTRICTIONS



=head1 SEE ALSO

L<Pod::Parser>, L<po4a(7)>, L<Locale::Po4a::Po(1)>.

=head1 AUTHORS

Denis Barbier E<lt>denis.barbier@linuxfr.orgE<gt>
Martin Quinson E<lt>martin.quinson@tuxfamily.orgE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2002 by SPI, inc.

This program is free software; you may redistribute it and/or modify it
under the terms of GPL (see COPYING file).

=cut
