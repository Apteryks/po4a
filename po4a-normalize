#!/usr/bin/perl -w
# $Id: po4a-normalize,v 1.1 2003-01-09 08:35:06 mquinson Exp $
#
# Copyright 2002 by Martin Quinson <Martin.Quinson@ens-lyon.fr>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of GPL (see COPYING).

my $VERSION="0.12";

=head1 NAME

po4a-normalize - Normalize a documentation file by parsing it in po4a, and writing it back

=head1 SYNOPSIS

po4a-normalize -t module I<original>

=head1 DESCRIPTION

The goal po4a [po for anything] project is to ease translations (and more
interstingly, the maintainance of translation) using gettext tools on areas
where they were not expected like documentation.

The C<po4a-normalize> script is a debugging tool used to make sure that po4a don't
change the document when it's not supposed to. Only use it if you're developping 
a new module, or if you doubt the sanity of the tools.

The generated document will be written to po4a-normalize.output while the generated
po file will be written to po4a-normalize.po. No way to change that ;)

=head1 OPTIONS

=over 4

=item -t

format type of the documentation you want to handle. This can be one of:

=over 4

=item kernelhelp

The help messages associated with each kernel compilation option.

=item man

Good old manual page format.

=item pod

Perl documentation format.

=item sgml

For now, only DebianDoc is understood.

=back 

=item -V, --version

Displays the version of the script and exits.

=back

=head1 SEE ALSO

L<po4a(7)>, L<po4a-updatepo(1)>, L<po4a-translate(1)>, L<po4a-gettextize>.

=head1 AUTHORS

 Denis Barbier <barbier@linuxfr.org>
 Martin Quinson <martin.quinson@tuxfamily.org>

=head1 COPYRIGHT AND LICENSE

Copyright 2002 by SPI, inc.

This program is free software; you may redistribute it and/or modify it
under the terms of GPL (see COPYING file).

=cut


use strict;
use Locale::Po4a::KernelHelp;
use Locale::Po4a::Man;
use Locale::Po4a::Pod;
use Locale::Po4a::Sgml;

use Getopt::Long qw(GetOptions);

use Locale::gettext;
use POSIX;     # Needed for setlocale()

use Pod::Usage qw(pod2usage);

setlocale(LC_MESSAGES, "");
textdomain('po4a');

sub show_version {
    print sprintf(gettext("po4a-normalize version %s.\nwritten by Martin Quinson and Denis Barbier.\n\nCopyright (C) 2002 Software of Public Interest, Inc.\nThis is free software; see source code for copying\nconditions. There is NO warranty; not even for \nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n"),$VERSION);
}

my ($help,$type,$debug,$verbose);
Getopt::Long::Configure('no_auto_abbrev','no_ignore_case');
GetOptions(
        'help|h'       => \$help,
        'type|t=s'     => \$type,

        'verbose|v'   => \$verbose,
        'debug|d'     => \$debug,
        'version|V'    => \&show_version
) or pod2usage(1);

pod2usage (0) if $help;
pod2usage (1) unless scalar @ARGV == 1;

my $parser;

if (lc($type) eq 'kernelhelp') {
    $parser=Locale::Po4a::KernelHelp->new('verbose'=>$verbose);
} elsif (lc($type) eq 'man') {
    $parser=Locale::Po4a::Man->new('verbose'=>$verbose);
} elsif (lc($type) eq 'pod') {
    $parser=Locale::Po4a::Pod->new('verbose'=>$verbose);
} elsif (lc($type) eq 'sgml') {
    $parser=Locale::Po4a::Sgml->new('verbose'=>$verbose);
} else {
    warn sprintf(gettext("Unknown format type: %s.\n".
"Allowed values are: kernelhelp, man, sgml, pod.\n"),$type);
  pod2usage(1);
}

my $filename = shift || pod2usage(1);
-e $filename || die sprintf(gettext("File %s does not exists.\n"),$filename);

$parser->read($filename);
$parser->parse();
$parser->write('po4a-normalize.output');
$parser->writepo('po4a-normalize.po');

__END__

