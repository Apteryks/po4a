#! /usr/bin/perl -w
eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
    if $running_under_some_shell;

# po4a-translate -- normalize documentation files
# $Id: po4a-normalize,v 1.9 2003-11-26 23:58:12 barbier Exp $
#
# Copyright 2002, 2003 by Martin Quinson <Martin.Quinson@ens-lyon.fr>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of GPL (see COPYING).

my $VERSION=$Locale::Po4a::TransTractor::VERSION;

=head1 NAME

po4a-normalize - Normalize a documentation file by parsing it in po4a, and writing it back

=head1 SYNOPSIS

po4a-normalize -f E<lt>formatE<gt> E<lt>original.docE<gt>

=head1 DESCRIPTION

The goal po4a [po for anything] project is to ease translations (and more
interstingly, the maintainance of translation) using gettext tools on areas
where they were not expected like documentation.

The C<po4a-normalize> script is a debugging tool used to make sure that
po4a don't change the document when it's not supposed to. Only use it if
you're developping a new module, or if you doubt the sanity of the tools.

The generated document will be written to po4a-normalize.output while the
generated po file will be written to po4a-normalize.po. No way to change
that ;)

=head1 OPTIONS

=over 4

=item -h, --help

Show a short help message.

=item --help-format

List the documentation format understood by po4a.

=item -f, --format

Format type of the documentation you want to handle. Use the --help-format
option to see the list of available formats.

=item -V, --version

Displays the version of the script and exits.

=back

=head1 SEE ALSO

L<po4a(7)>, L<po4a-updatepo(1)>, L<po4a-translate(1)>, L<po4a-gettextize(1)>.

=head1 AUTHORS

 Denis Barbier <barbier@linuxfr.org>
 Martin Quinson <martin.quinson@tuxfamily.org>

=head1 COPYRIGHT AND LICENSE

Copyright 2002, 2003 by SPI, inc.

This program is free software; you may redistribute it and/or modify it
under the terms of GPL (see COPYING file).

=cut

use 5.006;
use strict;
use warnings;

use Locale::Po4a::KernelHelp;
use Locale::Po4a::Man;
use Locale::Po4a::Pod;
use Locale::Po4a::Sgml;
use Locale::Po4a::Chooser;

use Getopt::Long qw(GetOptions);

use Locale::gettext;
use POSIX;     # Needed for setlocale()

use Pod::Usage qw(pod2usage);

setlocale(LC_MESSAGES, "");
textdomain('po4a');

sub show_version {
    print sprintf(gettext("po4a-normalize version %s.\nwritten by Martin Quinson and Denis Barbier.\n\nCopyright (C) 2002, 2003 Software of Public Interest, Inc.\nThis is free software; see source code for copying\nconditions. There is NO warranty; not even for \nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n"),$VERSION);
}

my ($help_fmt,$help,$type,$debug,$verbose);
Getopt::Long::Configure('no_auto_abbrev','no_ignore_case');
GetOptions(
        'help|h'       => \$help,
	'help-format'  => \$help_fmt,
        'format|f=s'   => \$type,

        'verbose|v'   => \$verbose,
        'debug|d'     => \$debug,
        'version|V'    => \&show_version
) or pod2usage(1);

$help && pod2usage (0);
$help_fmt && Locale::Po4a::Chooser::list(0);
pod2usage (1) unless scalar @ARGV == 1;

my $parser=Locale::Po4a::Chooser::new($type);

my $filename = shift || pod2usage(1);
-e $filename || die sprintf(gettext("File %s does not exists.\n"),$filename);

$parser->read($filename);
$parser->parse();
$parser->write('po4a-normalize.output');
$parser->writepo('po4a-normalize.po');

__END__

